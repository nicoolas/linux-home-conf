#!/bin/sh

alias grep='grep --color=auto'

alias git-fetch-all='git fetch --all --prune --prune-tags'

alias dpkg_disk_usage="dpkg-query -Wf '\${Installed-Size}\t\${Package}\t\${Priority}\n\' | egrep '\s(optional|extra)' | cut -f 1,2 | sort -n"

function slogs() {
	local logs=/var/log/syslog
	local SUDO=""
	if [ -n "$1" ]; then logs="$1"; fi
	if [ ! -r "$logs" ] ; then SUDO=sudo; fi
	$SUDO tail -n 40 -F "$logs"
}

# startup of the ssh-agent
function f_start_ssh_agent() {
  local prefix="SSh-Agent: "

  if which pgrep >/dev/null 2>&1
  then
    AGENT_PID=$(pgrep -x ssh-agent)
    if [ $? -ne 0 ]
    then
      echo "$prefix: Starting SSH Agent"

      eval $(ssh-agent) && ssh-add ~/.ssh/id_rsa
      setx SSH_AUTH_SOCK $SSH_AUTH_SOCK
      setx SSH_AGENT_PID $SSH_AGENT_PID

      echo "$prefix: SSH Agent running (PID: $SSH_AGENT_PID)"
    else
      echo "$prefix: SSH Agent already running (PID: $AGENT_PID)"
    fi
  else
	# Cygwin: package procps
    echo "$prefix: SSH Agent: Missing 'pgrep'"
  fi
}

# TMUX
alias tmux-ls='tmux list-sessions'
alias tmux-copy=" tee /tmp/screen-exchange"
alias tmux-copy-n=' awk "//{printf \$1 }" | tee /tmp/screen-exchange'

function bbrowse()
{
    local _dir="$1"
    for _b in "caja" "nautilus" "dolphin" "nemo"
    do
        if which $_b &> /dev/null
        then
            [ -z "$_dir" ] && _dir="$(pwd)"
            echo $_b "$_dir"
            $_b "$_dir"  &>/dev/null &
            return 0
        fi
    done

    if which explorer.exe 2>/dev/null | grep -q '^/cygdrive/'
    then
        explorer.exe /e /root,$(pwd | sed 's_^/cygdrive/__;s_/_:\\_;s_/_\\_g')
        return 0
    fi

    if which explorer.exe 2>/dev/null | grep -q '^/mnt/c/Windows/explorer.exe'
    then
		if pwd | grep -q '/mnt/[a-z]'
		then
	        explorer.exe $(pwd | sed 's_^/mnt/\([a-z]\)[/]_\1:\\_;s_/_\\_g')
	        return 0
		else
			echo "Invalid pwd"
			return 1
		fi
    fi
    echo "No browser found"
    return 1
}

function tgo-old()
{
	local TMUX_SESSION_NAME=0
	[ -n "$1" ] && TMUX_SESSION_NAME="$1"
	tmux start-server
	if [ -z "$TMUX" ]; then
		# new-session -A not supported on tmux versions < 1.9
		#tmux new-session -A -s $TMUX_SESSION_NAME
		if  tmux has-session -t $TMUX_SESSION_NAME 2>/dev/null
		then tmux attach-session -t $TMUX_SESSION_NAME
		else tmux new-session -s $TMUX_SESSION_NAME
		fi
	else
		echo "Running in a Tmux session ($TMUX)"
	fi
}

# no session exist + no session arg -> start default session
# no session exist +    session arg -> start arg session
# sessions exist   +    session arg -> start arg session
# sessions exist   + no session arg -> start first existing session
# 
function f_tmux-recent-session() {
	tmux list-sessions -F "#{session_last_attached}_#{session_name}" | sort | tail -n 1 | sed 's/^[0-9]*_//'
}

function tgo()
{
	if [ -n "$TMUX" ]
	then
		echo "Running in a Tmux session ($TMUX)"
		return 0
	fi

    which bc >/dev/null 2>&1 || { echo "Please install 'bc'"; return 1; }
    tmux -V >/dev/null || { echo "Tmux error, please investigate."; return 1; }
	local tmux_version=$(tmux -V | cut -c 6-)

	echo "Tmux version: '$tmux_version'"
	[ "$tmux_version" = "" ] && tmux_version=0
	[ "$tmux_version" = "master" ] && tmux_version=99.9
	[ "${tmux_version%%[-\.0-9]*}" = "next" ] && tmux_version=99.9

	if [ $(echo "$tmux_version > 1.9" | bc) -ne 1 ]
	then
		echo "Old tmux version ($(tmux -V)), use 'tgo-old'"
		return 0
	fi

	local _session=0
	if [ -n "$1" ]
	then
		_session="$1"
	elif tmux list-sessions
	then
		_session=$(f_tmux-recent-session)
	fi
	echo
	echo "Target session: '$_session'"
	tmux new-session -A -s $_session
}

function tgos(){
	local target_session=$(f_tmux-recent-session)
	[ -z "$target_session" ] && target_session="0"
	tmux choose-tree -t $target_session -s
	tmux attach-session -t $target_session
}

function tgos0(){
	local target_session=0
	local target_window=0
	local target_pane=0
	tmux new-session -D -s $target_session
	tmux select-window -t $target_session:$target_window
	tmux select-pane -t $target_session:$target_window.$target_pane
	tmux choose-tree -t $target_session:$target_window.$target_pane -s
	tmux attach-session -t $target_session
}

# TODO: fix completion
function _tssh() {
	win_name="$(echo $1 | cut -d '_' -f1)"
	tmux rename-window $win_name
	ssh "$@"
}

function vix() {
	touch "$1" || return 1
	chmod +x "$1" || return 1
	vi "$1"
}

function until-do() {
	local _to_sec=30
	local _count=1
	if [ "$1" = '-t' ]
	then
		local _to_sec=$2
		shift 2
	fi
	while true
	do
		printf '%s|#%*i - %s\n' "$0" 3 "$_count" "$(date +'%Y-%m-%d %H:%M:%S')"
		timeout $_to_sec "$@" && break
		_count=$((_count+1))
		sleep 1
	done
	if which notify-send >/dev/null 2>&1
	then
		notify-send -t 0 -u critical "Job Done: $(date)" "Count: $_count" 
	fi
}

# some more ls aliases
alias ls='ls --color=auto'
alias ll='ls -hl'
alias la='ls -hA'
alias lla='ls -hlA'
alias l='ls -hCF'

